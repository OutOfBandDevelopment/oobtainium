<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="OoBDev.Oobtainium.Tests.GeneralTests">
  <Summary>
    <Class>OoBDev.Oobtainium.Tests.GeneralTests</Class>
    <Assembly>OoBDev.Oobtainium.Tests</Assembly>
    <Files>
      <File>/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium.Tests/GeneralTests.cs</File>
    </Files>
    <Coveredlines>76</Coveredlines>
    <Uncoveredlines>2</Uncoveredlines>
    <Coverablelines>78</Coverablelines>
    <Totallines>177</Totallines>
    <Linecoverage>97.4</Linecoverage>
    <Coveredbranches>18</Coveredbranches>
    <Totalbranches>20</Totalbranches>
    <Branchcoverage>90</Branchcoverage>
    <Title>src/OoBDev.Oobtainium/OoBDev.Oobtainium.sln - 0.1.0-dev-poc-typebuilding.49</Title>
  </Summary>
  <Metrics>
    <Element name="get_TestContext">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="GeneralTest">
      <Linecoverage>96.00</Linecoverage>
      <Branchcoverage>91.66</Branchcoverage>
    </Element>
    <Element name="SimpleTest">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="OnAgainOffAgainTest">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
  </Metrics>
  <Files>
    <File name="/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium.Tests/GeneralTests.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using Microsoft.Extensions.DependencyInjection;" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using Microsoft.Extensions.Logging;" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using Microsoft.VisualStudio.TestTools.UnitTesting;" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using OoBDev.Oobtainium.Tests.TestTargets;" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System;" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Threading.Tasks;" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace OoBDev.Oobtainium.Tests" />
      <LineAnalysis line="9" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="10" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    [TestClass]" />
      <LineAnalysis line="11" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public class GeneralTests" />
      <LineAnalysis line="12" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="13" visits="32" coverage="Covered" coveredbranches="" totalbranches="" content="        public TestContext TestContext { get; set; }" />
      <LineAnalysis line="14" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="15" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        [TestMethod, TestCategory(TestCategories.Unit)]" />
      <LineAnalysis line="16" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public async Task GeneralTest()" />
      <LineAnalysis line="17" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="18" visits="2" coverage="Covered" coveredbranches="4" totalbranches="4" content="            var services = new ServiceCollection()" />
      <LineAnalysis line="19" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                .AddLogging(logging =&gt;" />
      <LineAnalysis line="20" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                    logging.AddDebug()" />
      <LineAnalysis line="21" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                           .SetMinimumLevel(LogLevel.Debug)" />
      <LineAnalysis line="22" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                    )" />
      <LineAnalysis line="23" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="24" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                //Setup container for oobtainium" />
      <LineAnalysis line="25" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                .AddOobtainium()" />
      <LineAnalysis line="26" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                //.AddScoped&lt;ICallRecorder, CallRecorder&gt;()" />
      <LineAnalysis line="27" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                //.AddScoped&lt;ICallBindingStore, CallBindingStore&gt;()" />
      <LineAnalysis line="28" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                //.AddTransient&lt;ICaptureProxyFactory, CaptureProxyFactory&gt;()" />
      <LineAnalysis line="29" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                //.AddTransient&lt;ICallBinder, CallBinder&gt;()" />
      <LineAnalysis line="30" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                //.AddTransient&lt;ICallHandler, CallHandler&gt;()" />
      <LineAnalysis line="31" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="32" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                //setup mocked interface in IOC" />
      <LineAnalysis line="33" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                .AddTransient(sp =&gt; sp.GetRequiredService&lt;ICaptureProxyFactory&gt;().Create&lt;IAnotherInterface&gt;())" />
      <LineAnalysis line="34" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="35" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                ;" />
      <LineAnalysis line="36" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            var sp = services.BuildServiceProvider();" />
      <LineAnalysis line="37" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="38" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            var factory = sp.GetRequiredService&lt;ICaptureProxyFactory&gt;();" />
      <LineAnalysis line="39" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="40" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            // configure binding interceptions" />
      <LineAnalysis line="41" visits="2" coverage="Covered" coveredbranches="6" totalbranches="6" content="            var binder = sp.GetRequiredService&lt;ICallBinder&gt;()" />
      <LineAnalysis line="42" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                    .Build&lt;ITargetInterface&gt;()" />
      <LineAnalysis line="43" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                        .Bind(a =&gt; a.VoidReturn(), () =&gt; TestContext.WriteLine(&quot;Do Work&quot;))" />
      <LineAnalysis line="44" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                        .Bind(a =&gt; a.VoidReturnAsync(), async args =&gt;" />
      <LineAnalysis line="45" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                        {" />
      <LineAnalysis line="46" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="                            TestContext.WriteLine(&quot;Delay&quot;);" />
      <LineAnalysis line="47" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="                            await Task.Delay(1000);" />
      <LineAnalysis line="48" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="                            TestContext.WriteLine(&quot;Done&quot;);" />
      <LineAnalysis line="49" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="                        })" />
      <LineAnalysis line="50" visits="4" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                        .Bind(a =&gt; a.InvokeAsync(new { Test = &quot;&quot; }), p =&gt; new { Test = p[0].ToString() ?? &quot;&quot; })" />
      <LineAnalysis line="51" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                        .Bind(a =&gt; a.VoidReturnWithGenericInput(new { Other = &quot;&quot; }), () =&gt; Task.FromResult(new { Other = &quot;&quot; }))" />
      <LineAnalysis line="52" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                        .Bind(a =&gt; a.ReturnValue(), () =&gt; Task.FromResult(Guid.NewGuid()))" />
      <LineAnalysis line="53" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                    .Build&lt;IAnotherInterface&gt;()" />
      <LineAnalysis line="54" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                    ;" />
      <LineAnalysis line="55" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="56" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //create proxy" />
      <LineAnalysis line="57" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            var instance = factory.Create&lt;ITargetInterface&gt;();" />
      <LineAnalysis line="58" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="59" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            TestContext.WriteLine($&quot;Out&gt; {instance.ReturnValue()}&quot;);" />
      <LineAnalysis line="60" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            instance.VoidReturn();" />
      <LineAnalysis line="61" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            await instance.VoidReturnAsync();" />
      <LineAnalysis line="62" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            instance[456] = &quot;Hi!&quot;;" />
      <LineAnalysis line="63" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            TestContext.WriteLine($&quot;Out&gt; {instance[456]}&quot;);" />
      <LineAnalysis line="64" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            instance[456] = &quot;xyz&quot;;" />
      <LineAnalysis line="65" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            TestContext.WriteLine($&quot;Out&gt; {instance[456]}&quot;);" />
      <LineAnalysis line="66" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            await instance.VoidReturnWithInputAsync(&quot;HI!&quot;);" />
      <LineAnalysis line="67" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            await instance.VoidReturnWithGenericInputAsync(234);" />
      <LineAnalysis line="68" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            TestContext.WriteLine($&quot;Out&gt; {await instance.InvokeAsync()}&quot;);" />
      <LineAnalysis line="69" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            TestContext.WriteLine($&quot;Out&gt; {await instance.InvokeAsync(&quot;Hello!!&quot;)}&quot;);" />
      <LineAnalysis line="70" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            TestContext.WriteLine($&quot;Out&gt; {await instance.InvokeAsync(345)}&quot;);" />
      <LineAnalysis line="71" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            await instance.VoidReturnAsync();" />
      <LineAnalysis line="72" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            await instance.InvokeAsync(new { Test = &quot;Hello&quot; });" />
      <LineAnalysis line="73" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            instance.VoidReturnWithGenericInput(new { Other = &quot;hello&quot; });" />
      <LineAnalysis line="74" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="75" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            var another = sp.GetRequiredService&lt;IAnotherInterface&gt;();" />
      <LineAnalysis line="76" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            this.TestContext.WriteLine($&quot;{another.DoWork(&quot;hello world!&quot;)}&quot;);" />
      <LineAnalysis line="77" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            this.TestContext.WriteLine($&quot;{await another.DoWork2(&quot;hello world!&quot;)}&quot;);" />
      <LineAnalysis line="78" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="79" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //retrieve call recorder" />
      <LineAnalysis line="80" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            var captured = sp.GetRequiredService&lt;ICallRecorder&gt;();" />
      <LineAnalysis line="81" visits="0" coverage="NotCovered" coveredbranches="1" totalbranches="2" content="            foreach (var recoding in captured)" />
      <LineAnalysis line="82" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="83" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="                TestContext.WriteLine($&quot;&gt; {recoding}&quot;);" />
      <LineAnalysis line="84" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="85" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            /*" />
      <LineAnalysis line="86" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.String ReturnValue()  =&gt; 295b1cf5-05b3-4e21-a27b-2fcb82d8ef74" />
      <LineAnalysis line="87" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::Void VoidReturn()" />
      <LineAnalysis line="88" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.Threading.Tasks.Task VoidReturnAsync()" />
      <LineAnalysis line="89" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::Void set_Item(Int32, System.String) [456;Hi!]" />
      <LineAnalysis line="90" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.String get_Item(Int32) [456] =&gt; Hi!" />
      <LineAnalysis line="91" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::Void set_Item(Int32, System.String) [456;xyz]" />
      <LineAnalysis line="92" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.String get_Item(Int32) [456] =&gt; xyz" />
      <LineAnalysis line="93" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.Threading.Tasks.Task VoidReturnWithInputAsync(System.String) [HI!]" />
      <LineAnalysis line="94" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.Threading.Tasks.Task VoidReturnWithGenericInputAsync[Int32](Int32) [234]" />
      <LineAnalysis line="95" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.Threading.Tasks.Task`1[System.Object] InvokeAsync()" />
      <LineAnalysis line="96" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.Threading.Tasks.Task`1[System.String] InvokeAsync[String](System.String) [Hello!!]" />
      <LineAnalysis line="97" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.Threading.Tasks.Task`1[System.Int32] InvokeAsync[Int32](Int32) [345]" />
      <LineAnalysis line="98" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.Threading.Tasks.Task VoidReturnAsync()" />
      <LineAnalysis line="99" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.Threading.Tasks.Task`1[&lt;&gt;f__AnonymousType0`1[System.String]] InvokeAsync[&lt;&gt;f__AnonymousType0`1](&lt;&gt;f__AnonymousType0`1[System.String]) [{ Test = Hello }] =&gt; { Test = { Test = Hello } }" />
      <LineAnalysis line="100" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::Void VoidReturnWithGenericInput[&lt;&gt;f__AnonymousType1`1](&lt;&gt;f__AnonymousType1`1[System.String]) [{ Other = hello }]" />
      <LineAnalysis line="101" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.IAnotherInterface::Int32 DoWork(System.String) [hello world!]" />
      <LineAnalysis line="102" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                &gt; OoBDev.Oobtainium.Tests.TestTargets.IAnotherInterface::System.Threading.Tasks.Task`1[System.Int32] DoWork2(System.String) [hello world!]" />
      <LineAnalysis line="103" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            */" />
      <LineAnalysis line="104" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="105" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="106" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        [TestMethod, TestCategory(TestCategories.Unit)]" />
      <LineAnalysis line="107" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public void SimpleTest()" />
      <LineAnalysis line="108" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="109" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            var factory = new CaptureProxyFactory();" />
      <LineAnalysis line="110" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="111" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //mock out method response" />
      <LineAnalysis line="112" visits="2" coverage="Covered" coveredbranches="2" totalbranches="2" content="            var bindings = new CallBinder()" />
      <LineAnalysis line="113" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                .Build&lt;ITargetInterface&gt;()" />
      <LineAnalysis line="114" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                    .Bind(a =&gt; a.ReturnValue(), () =&gt; &quot;Hello World&quot;)" />
      <LineAnalysis line="115" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                    ;" />
      <LineAnalysis line="116" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="117" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //create instance with handler" />
      <LineAnalysis line="118" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            var instance = factory.Create&lt;ITargetInterface&gt;(handler: new CallHandler(bindings.Store));" />
      <LineAnalysis line="119" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="120" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //test function" />
      <LineAnalysis line="121" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            var result = instance.ReturnValue();" />
      <LineAnalysis line="122" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="123" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //assert" />
      <LineAnalysis line="124" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            Assert.AreEqual(&quot;Hello World&quot;, result);" />
      <LineAnalysis line="125" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="126" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //// TODO: fix this... in process of moving" />
      <LineAnalysis line="127" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            ////get recording from proxy instance" />
      <LineAnalysis line="128" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //var recorder = ((IHaveCallRecorder)instance).Recorder;" />
      <LineAnalysis line="129" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //foreach (var recoding in recorder)" />
      <LineAnalysis line="130" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //    this.TestContext.WriteLine(recoding?.ToString());" />
      <LineAnalysis line="131" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="132" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="133" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        [TestMethod, TestCategory(TestCategories.Unit)]" />
      <LineAnalysis line="134" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public void OnAgainOffAgainTest()" />
      <LineAnalysis line="135" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="136" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            var factory = new CaptureProxyFactory();" />
      <LineAnalysis line="137" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="138" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //create instance with handler" />
      <LineAnalysis line="139" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            var instance = factory.Create&lt;ITargetInterface&gt;();" />
      <LineAnalysis line="140" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="141" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            // not bound" />
      <LineAnalysis line="142" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="143" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            var builder = ((IHaveCallBindingStore)instance).Store.Build&lt;ITargetInterface&gt;();" />
      <LineAnalysis line="144" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="145" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //test function" />
      <LineAnalysis line="146" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            Assert.IsNull(instance.ReturnValue());" />
      <LineAnalysis line="147" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="148" visits="4" coverage="Covered" coveredbranches="2" totalbranches="2" content="            builder.Bind(a =&gt; a.ReturnValue(), () =&gt; &quot;Hello World&quot;);" />
      <LineAnalysis line="149" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            Assert.AreEqual(&quot;Hello World&quot;, instance.ReturnValue());" />
      <LineAnalysis line="150" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="151" visits="4" coverage="Covered" coveredbranches="2" totalbranches="2" content="            builder.Bind(a =&gt; a.ReturnValue(), () =&gt; &quot;Hello World!&quot;);" />
      <LineAnalysis line="152" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            Assert.AreEqual(&quot;Hello World!&quot;, instance.ReturnValue());" />
      <LineAnalysis line="153" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="154" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            builder.Remove(a =&gt; a.ReturnValue());" />
      <LineAnalysis line="155" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            Assert.IsNull(instance.ReturnValue());" />
      <LineAnalysis line="156" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="157" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            // TODO: fix this... in process of moving" />
      <LineAnalysis line="158" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            ////get recording from proxy instance" />
      <LineAnalysis line="159" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //var recorder = ((IHaveCallRecorder)instance).Recorder;" />
      <LineAnalysis line="160" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //foreach (var recoding in recorder)" />
      <LineAnalysis line="161" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //    this.TestContext.WriteLine(recoding?.ToString());" />
      <LineAnalysis line="162" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="163" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            /*" />
      <LineAnalysis line="164" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="             OnAgainOffAgainTest" />
      <LineAnalysis line="165" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="               Source: GeneralTests.cs line 133" />
      <LineAnalysis line="166" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="               Duration: 37 ms" />
      <LineAnalysis line="167" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="168" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="              Standard Output:" />
      <LineAnalysis line="169" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                TestContext Messages:" />
      <LineAnalysis line="170" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.String ReturnValue()" />
      <LineAnalysis line="171" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.String ReturnValue()  =&gt; Hello World" />
      <LineAnalysis line="172" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.String ReturnValue()  =&gt; Hello World!" />
      <LineAnalysis line="173" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                OoBDev.Oobtainium.Tests.TestTargets.ITargetInterface::System.String ReturnValue()" />
      <LineAnalysis line="174" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            */" />
      <LineAnalysis line="175" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="176" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="177" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>