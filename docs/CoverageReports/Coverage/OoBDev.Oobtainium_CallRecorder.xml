<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="OoBDev.Oobtainium.Recording.CallRecorder">
  <Summary>
    <Class>OoBDev.Oobtainium.Recording.CallRecorder</Class>
    <Assembly>OoBDev.Oobtainium</Assembly>
    <Files>
      <File>/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium/Recording/CallRecorder.cs</File>
    </Files>
    <Coveredlines>6</Coveredlines>
    <Uncoveredlines>6</Uncoveredlines>
    <Coverablelines>12</Coverablelines>
    <Totallines>34</Totallines>
    <Linecoverage>50</Linecoverage>
    <Coveredbranches>0</Coveredbranches>
    <Totalbranches>4</Totalbranches>
    <Branchcoverage>0</Branchcoverage>
    <Title>src/OoBDev.Oobtainium/OoBDev.Oobtainium.sln - 0.1.0-dev-poc-typebuilding.49</Title>
  </Summary>
  <Metrics>
    <Element name="ctor">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="get_Capture">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Clear">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="GetEnumerator">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="SystemCollectionsIEnumerableGetEnumerator">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="RecordCall">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>0</Branchcoverage>
    </Element>
  </Metrics>
  <Files>
    <File name="/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium/Recording/CallRecorder.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using Microsoft.Extensions.Logging;" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System;" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Collections;" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Collections.Generic;" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Linq;" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Reflection;" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace OoBDev.Oobtainium.Recording" />
      <LineAnalysis line="9" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="10" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public class CallRecorder : ICallRecorder" />
      <LineAnalysis line="11" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="12" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private readonly ILogger&lt;ICallRecorder&gt;? _log;" />
      <LineAnalysis line="13" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="        private readonly SynchronizedCollection&lt;IRecordedCall&gt; _calls = new SynchronizedCollection&lt;IRecordedCall&gt;();" />
      <LineAnalysis line="14" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="15" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="        public CallRecorder(ILogger&lt;ICallRecorder&gt;? log = null)" />
      <LineAnalysis line="16" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="17" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="            _log = log;" />
      <LineAnalysis line="18" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="            Capture = RecordCall;" />
      <LineAnalysis line="19" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="20" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="21" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public CaptureHandler Capture { get; }" />
      <LineAnalysis line="22" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="23" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public void Clear() =&gt; _calls.Clear();" />
      <LineAnalysis line="24" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="25" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="        public IEnumerator&lt;IRecordedCall&gt; GetEnumerator() =&gt; _calls.GetEnumerator();" />
      <LineAnalysis line="26" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        IEnumerator IEnumerable.GetEnumerator() =&gt; _calls.GetEnumerator();" />
      <LineAnalysis line="27" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="28" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private void RecordCall(object instance, Type instanceAs, MethodInfo method, object[] arguments, object? response)" />
      <LineAnalysis line="29" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="30" visits="0" coverage="NotCovered" coveredbranches="0" totalbranches="4" content="            _log?.LogInformation($&quot;{instance} as {instanceAs}: {method.Name}({string.Join(';', arguments.Select(i =&gt; i))}) =&gt; {response}&quot;);" />
      <LineAnalysis line="31" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            _calls.Add(new RecordedCall(instanceAs, method, arguments, response));" />
      <LineAnalysis line="32" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="33" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="34" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>