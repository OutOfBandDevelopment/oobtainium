<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="OoBDev.Oobtainium.CaptureProxy`1">
  <Summary>
    <Class>OoBDev.Oobtainium.CaptureProxy`1</Class>
    <Assembly>OoBDev.Oobtainium</Assembly>
    <Files>
      <File>/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium/CaptureProxy.cs</File>
    </Files>
    <Coveredlines>56</Coveredlines>
    <Uncoveredlines>4</Uncoveredlines>
    <Coverablelines>60</Coverablelines>
    <Totallines>155</Totallines>
    <Linecoverage>93.3</Linecoverage>
    <Coveredbranches>49</Coveredbranches>
    <Totalbranches>72</Totalbranches>
    <Branchcoverage>68</Branchcoverage>
    <Title>src/OoBDev.Oobtainium/OoBDev.Oobtainium.sln - 0.1.0-dev-poc-typebuilding.49</Title>
  </Summary>
  <Metrics>
    <Element name="OoBDevOobtainiumIHaveCallHandlerget_Handler">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="OoBDevOobtainiumIHaveCallBindingStoreget_Store">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="ctor">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Invoke">
      <Linecoverage>94.11</Linecoverage>
      <Branchcoverage>67.64</Branchcoverage>
    </Element>
    <Element name="Create">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>75.00</Branchcoverage>
    </Element>
  </Metrics>
  <Files>
    <File name="/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium/CaptureProxy.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using Microsoft.Extensions.Logging;" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using OoBDev.Oobtainium.Recording;" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System;" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Collections.Concurrent;" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Reflection;" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Text.RegularExpressions;" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Threading.Tasks;" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="9" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace OoBDev.Oobtainium" />
      <LineAnalysis line="10" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="11" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public class CaptureProxy&lt;I&gt; : DispatchProxy, IHaveCallHandler, IHaveCallBindingStore" />
      <LineAnalysis line="12" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="13" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable." />
      <LineAnalysis line="14" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private ICallHandler _handler;" />
      <LineAnalysis line="15" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable." />
      <LineAnalysis line="16" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="17" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        ICallHandler IHaveCallHandler.Handler =&gt; _handler;" />
      <LineAnalysis line="18" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="        ICallBindingStore IHaveCallBindingStore.Store =&gt; _handler.Store;" />
      <LineAnalysis line="19" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="20" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private ILogger&lt;I&gt;? _logger;" />
      <LineAnalysis line="21" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="22" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //TODO: this backing store should move the CallBindingStore" />
      <LineAnalysis line="23" visits="8" coverage="Covered" coveredbranches="" totalbranches="" content="        private readonly ConcurrentDictionary&lt;string, object?&gt; _backingStore = new ConcurrentDictionary&lt;string, object?&gt;();" />
      <LineAnalysis line="24" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="25" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        protected override object? Invoke(MethodInfo targetMethod, object[] args)" />
      <LineAnalysis line="26" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="27" visits="44" coverage="Covered" coveredbranches="2" totalbranches="2" content="            _logger?.LogInformation($&quot;{targetMethod}&quot;);" />
      <LineAnalysis line="28" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="29" visits="44" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="            var response = _handler?.Invoke(targetMethod, args);" />
      <LineAnalysis line="30" visits="44" coverage="Covered" coveredbranches="" totalbranches="" content="            var captured = response;" />
      <LineAnalysis line="31" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="32" visits="44" coverage="Covered" coveredbranches="2" totalbranches="2" content="            if (response is Task)" />
      <LineAnalysis line="33" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="34" visits="6" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                _logger?.LogDebug($&quot;{_handler} response is Task so await result&quot;);" />
      <LineAnalysis line="35" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="                var awaited = (Task)response;" />
      <LineAnalysis line="36" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="                awaited.GetAwaiter().GetResult();" />
      <LineAnalysis line="37" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="38" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="                var awaitedType = response.GetType();" />
      <LineAnalysis line="39" visits="6" coverage="Covered" coveredbranches="2" totalbranches="2" content="                if (awaitedType.IsGenericType)" />
      <LineAnalysis line="40" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                {" />
      <LineAnalysis line="41" visits="2" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                    _logger?.LogDebug($&quot;{_handler} is a Task&lt;&gt; so unwrap result&quot;);" />
      <LineAnalysis line="42" visits="2" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                    captured = awaitedType.GetProperty(&quot;Result&quot;)?.GetValue(response, null);" />
      <LineAnalysis line="43" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                }" />
      <LineAnalysis line="44" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                else" />
      <LineAnalysis line="45" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                {" />
      <LineAnalysis line="46" visits="4" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                    _logger?.LogDebug($&quot;{_handler} is a Task&lt;void&gt; change capture to null&quot;);" />
      <LineAnalysis line="47" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                    captured = default;" />
      <LineAnalysis line="48" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                }" />
      <LineAnalysis line="49" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="50" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="51" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //if the method is a property act like you have a backing store" />
      <LineAnalysis line="52" visits="44" coverage="Covered" coveredbranches="2" totalbranches="2" content="            if (targetMethod.IsSpecialName)" />
      <LineAnalysis line="53" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="54" visits="8" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                _logger?.LogDebug($&quot;{targetMethod} is special&quot;);" />
      <LineAnalysis line="55" visits="8" coverage="Covered" coveredbranches="2" totalbranches="2" content="                if (targetMethod.Name.StartsWith(&quot;set_&quot;))" />
      <LineAnalysis line="56" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                {" />
      <LineAnalysis line="57" visits="4" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                    var key = targetMethod.Name[4..] + (args.Length &gt; 1 ? '[' + string.Join(';', args[..^1]) + ']' : &quot;&quot;);" />
      <LineAnalysis line="58" visits="4" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                    var value = args.Length == 0 ? args[0] : args[^1];" />
      <LineAnalysis line="59" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="60" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                    //TODO: look at an indexer" />
      <LineAnalysis line="61" visits="4" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                    _logger?.LogDebug($&quot;{key} is acting like a setter&quot;);" />
      <LineAnalysis line="62" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="                    _backingStore.AddOrUpdate(key, value, (k, v) =&gt; value);" />
      <LineAnalysis line="63" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                }" />
      <LineAnalysis line="64" visits="4" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                else if (targetMethod.Name.StartsWith(&quot;get_&quot;))" />
      <LineAnalysis line="65" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                {" />
      <LineAnalysis line="66" visits="4" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                    var key = targetMethod.Name[4..] + (args.Length &gt; 0 ? '[' + string.Join(';', args) + ']' : &quot;&quot;);" />
      <LineAnalysis line="67" visits="4" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                    _logger?.LogDebug($&quot;{key} is acting like a getter&quot;);" />
      <LineAnalysis line="68" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                    _backingStore.TryGetValue(key, out captured);" />
      <LineAnalysis line="69" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                }" />
      <LineAnalysis line="70" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                else" />
      <LineAnalysis line="71" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                {" />
      <LineAnalysis line="72" visits="0" coverage="NotCovered" coveredbranches="0" totalbranches="2" content="                    _logger?.LogDebug($&quot;{targetMethod} is not that special&quot;);" />
      <LineAnalysis line="73" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                }" />
      <LineAnalysis line="74" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="75" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="76" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            //TODO: add type converter support" />
      <LineAnalysis line="77" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="78" visits="44" coverage="Covered" coveredbranches="4" totalbranches="4" content="            if (targetMethod.ReturnType == null || targetMethod.ReturnType == typeof(void))" />
      <LineAnalysis line="79" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="80" visits="8" coverage="Covered" coveredbranches="" totalbranches="" content="                return null;" />
      <LineAnalysis line="81" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="82" visits="36" coverage="Covered" coveredbranches="2" totalbranches="2" content="            else if (targetMethod.ReturnType.IsInstanceOfType(captured))" />
      <LineAnalysis line="83" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="84" visits="12" coverage="Covered" coveredbranches="" totalbranches="" content="                return captured;" />
      <LineAnalysis line="85" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="86" visits="24" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="            else if (captured is Delegate)" />
      <LineAnalysis line="87" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="88" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="                return captured;" />
      <LineAnalysis line="89" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="90" visits="24" coverage="Covered" coveredbranches="2" totalbranches="2" content="            else if (typeof(Task).IsAssignableFrom(targetMethod.ReturnType))" />
      <LineAnalysis line="91" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="92" visits="18" coverage="Covered" coveredbranches="" totalbranches="" content="                var taskType = targetMethod.ReturnType;" />
      <LineAnalysis line="93" visits="18" coverage="Covered" coveredbranches="2" totalbranches="2" content="                if (taskType.IsGenericType)" />
      <LineAnalysis line="94" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                {" />
      <LineAnalysis line="95" visits="10" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                    _logger?.LogDebug($&quot;{targetMethod}.ReturnType is a Task&lt;&gt; so rebuild Task&lt;&gt;&quot;);" />
      <LineAnalysis line="96" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="97" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                    //rewrap captured value" />
      <LineAnalysis line="98" visits="10" coverage="Covered" coveredbranches="" totalbranches="" content="                    var taskReturnType = taskType.GetGenericArguments()[0];" />
      <LineAnalysis line="99" visits="10" coverage="Covered" coveredbranches="4" totalbranches="4" content="                    if (taskReturnType == typeof(string) &amp;&amp; !(captured is string))" />
      <LineAnalysis line="100" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                    {" />
      <LineAnalysis line="101" visits="2" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                        if (captured is byte[])" />
      <LineAnalysis line="102" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                        {" />
      <LineAnalysis line="103" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="                            captured = Convert.ToBase64String((byte[])captured);" />
      <LineAnalysis line="104" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                        }" />
      <LineAnalysis line="105" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                        else" />
      <LineAnalysis line="106" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                        {" />
      <LineAnalysis line="107" visits="2" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                            captured = captured?.ToString();" />
      <LineAnalysis line="108" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                        }" />
      <LineAnalysis line="109" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                    }" />
      <LineAnalysis line="110" visits="8" coverage="Covered" coveredbranches="2" totalbranches="2" content="                    else if (!taskReturnType.IsInstanceOfType(captured))" />
      <LineAnalysis line="111" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                    {" />
      <LineAnalysis line="112" visits="6" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                        _logger?.LogDebug($&quot;{captured} not assignable so get default value instead&quot;);" />
      <LineAnalysis line="113" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="                        captured = taskReturnType.GetDefaultValue();" />
      <LineAnalysis line="114" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                    }" />
      <LineAnalysis line="115" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="116" visits="10" coverage="PartiallyCovered" coveredbranches="2" totalbranches="4" content="                    var fromResult = typeof(Task).GetMethod(nameof(Task.FromResult), BindingFlags.Static | BindingFlags.Public)?.MakeGenericMethod(taskReturnType)" />
      <LineAnalysis line="117" visits="10" coverage="Covered" coveredbranches="" totalbranches="" content="                        ?? throw new NullReferenceException(&quot;Unable to resolve Task.FromResult&lt;&gt;&quot;);" />
      <LineAnalysis line="118" visits="10" coverage="Covered" coveredbranches="" totalbranches="" content="                    var result = fromResult.Invoke(null, new[] { captured });" />
      <LineAnalysis line="119" visits="10" coverage="Covered" coveredbranches="" totalbranches="" content="                    return result;" />
      <LineAnalysis line="120" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                }" />
      <LineAnalysis line="121" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                else" />
      <LineAnalysis line="122" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                {" />
      <LineAnalysis line="123" visits="8" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                    _logger?.LogDebug($&quot;{targetMethod}.ReturnType is a Task so return completed&quot;);" />
      <LineAnalysis line="124" visits="8" coverage="Covered" coveredbranches="" totalbranches="" content="                    return Task.CompletedTask;" />
      <LineAnalysis line="125" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                }" />
      <LineAnalysis line="126" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="127" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            // can is cast?" />
      <LineAnalysis line="128" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            // operator over load" />
      <LineAnalysis line="129" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            // convert?" />
      <LineAnalysis line="130" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            else" />
      <LineAnalysis line="131" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="132" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="                var @default = targetMethod.ReturnType.GetDefaultValue();" />
      <LineAnalysis line="133" visits="6" coverage="Covered" coveredbranches="" totalbranches="" content="                return @default;" />
      <LineAnalysis line="134" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="135" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="136" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="137" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        internal static I Create(" />
      <LineAnalysis line="138" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            ICallHandler? handler = null," />
      <LineAnalysis line="139" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            ICallRecorder? capture = null," />
      <LineAnalysis line="140" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            ILogger&lt;I&gt;? logger = null" />
      <LineAnalysis line="141" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            )" />
      <LineAnalysis line="142" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="143" visits="8" coverage="Covered" coveredbranches="" totalbranches="" content="            object? proxy = Create&lt;I, CaptureProxy&lt;I&gt;&gt;();" />
      <LineAnalysis line="144" visits="8" coverage="Covered" coveredbranches="2" totalbranches="2" content="            if (proxy != null)" />
      <LineAnalysis line="145" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="146" visits="8" coverage="Covered" coveredbranches="" totalbranches="" content="                var unwrapped = (CaptureProxy&lt;I&gt;)proxy;" />
      <LineAnalysis line="147" visits="8" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="                unwrapped._handler = handler ?? new CallHandler();" />
      <LineAnalysis line="148" visits="8" coverage="Covered" coveredbranches="" totalbranches="" content="                unwrapped._logger = logger;" />
      <LineAnalysis line="149" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="150" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="#pragma warning disable CS8603 // Possible null reference return." />
      <LineAnalysis line="151" visits="8" coverage="Covered" coveredbranches="" totalbranches="" content="            return (I)proxy;" />
      <LineAnalysis line="152" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="#pragma warning restore CS8603 // Possible null reference return." />
      <LineAnalysis line="153" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="154" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="155" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>