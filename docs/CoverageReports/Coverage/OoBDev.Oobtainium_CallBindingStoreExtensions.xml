<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="OoBDev.Oobtainium.CallBindingStoreExtensions">
  <Summary>
    <Class>OoBDev.Oobtainium.CallBindingStoreExtensions</Class>
    <Assembly>OoBDev.Oobtainium</Assembly>
    <Files>
      <File>/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium/CallBindingStore.cs</File>
    </Files>
    <Coveredlines>2</Coveredlines>
    <Uncoveredlines>1</Uncoveredlines>
    <Coverablelines>3</Coverablelines>
    <Totallines>75</Totallines>
    <Linecoverage>66.6</Linecoverage>
    <Coveredbranches>0</Coveredbranches>
    <Totalbranches>0</Totalbranches>
    <Title>src/OoBDev.Oobtainium/OoBDev.Oobtainium.sln - 0.1.0-dev-poc-typebuilding.49</Title>
  </Summary>
  <Metrics>
    <Element name="ToCallbinder">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Build">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Register">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
  </Metrics>
  <Files>
    <File name="/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium/CallBindingStore.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System;" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Collections.Concurrent;" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Collections.Generic;" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Linq;" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Linq.Expressions;" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Reflection;" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace OoBDev.Oobtainium" />
      <LineAnalysis line="9" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="10" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public static class CallBindingStoreExtensions" />
      <LineAnalysis line="11" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="12" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="        public static ICallBinder ToCallbinder(this ICallBindingStore store) =&gt; new CallBinder(store);" />
      <LineAnalysis line="13" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="        public static IBindingBuilder&lt;T&gt; Build&lt;T&gt;(this ICallBindingStore store) =&gt; store.ToCallbinder().Build&lt;T&gt;();" />
      <LineAnalysis line="14" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public static IBindingBuilder&lt;T&gt; Register&lt;T&gt;(this IHaveCallBindingStore have) =&gt; have.Store.Build&lt;T&gt;();" />
      <LineAnalysis line="15" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="16" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static void Add(this ICallBindingStore store, Expression action) =&gt; store.Add(null, action.AsMethodInfo(), null);" />
      <LineAnalysis line="17" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static void Add&lt;T&gt;(this ICallBindingStore store, Expression action) =&gt; store.Add(typeof(T), action.AsMethodInfo(), null);" />
      <LineAnalysis line="18" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static void Add(this ICallBindingStore store, Type type, Expression action) =&gt; store.Add(type, action.AsMethodInfo(), null);" />
      <LineAnalysis line="19" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static void Add(this ICallBindingStore store, Expression action, Delegate? callback) =&gt; store.Add(null, action.AsMethodInfo(), callback);" />
      <LineAnalysis line="20" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static void Add&lt;T&gt;(this ICallBindingStore store, Expression action, Delegate? callback) =&gt; store.Add(typeof(T), action.AsMethodInfo(), callback);" />
      <LineAnalysis line="21" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static void Add(this ICallBindingStore store, Type type, Expression action, Delegate? callback) =&gt; store.Add(type, action.AsMethodInfo(), callback);" />
      <LineAnalysis line="22" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static void Add(this ICallBindingStore store, MethodInfo method) =&gt; store.Add(null, method, null);" />
      <LineAnalysis line="23" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static void Add&lt;T&gt;(this ICallBindingStore store, MethodInfo method) =&gt; store.Add(typeof(T), method, null);" />
      <LineAnalysis line="24" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static void Add(this ICallBindingStore store, Type type, MethodInfo method) =&gt; store.Add(type, method, null);" />
      <LineAnalysis line="25" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static void Add(this ICallBindingStore store, MethodInfo method, Delegate? callback) =&gt; store.Add(null, method, callback);" />
      <LineAnalysis line="26" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static void Add&lt;T&gt;(this ICallBindingStore store, MethodInfo method, Delegate? callback) =&gt; store.Add(typeof(T), method, callback);" />
      <LineAnalysis line="27" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static void Add(this ICallBindingStore store, Type type, MethodInfo method, Delegate? callback) =&gt; store.Add(type, method, callback);" />
      <LineAnalysis line="28" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="29" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public class CallBindingStore : ICallBindingStore" />
      <LineAnalysis line="30" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="31" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private readonly ConcurrentDictionary&lt;(Type? type, MethodInfo method), Delegate&gt; _store = new ConcurrentDictionary&lt;(Type?, MethodInfo), Delegate&gt;();" />
      <LineAnalysis line="32" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="33" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public void Add(Type? type, MethodInfo? method, Delegate? callback)" />
      <LineAnalysis line="34" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="35" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            if (method == null || callback == null) return;" />
      <LineAnalysis line="36" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            _store.AddOrUpdate((type ?? method.DeclaringType, method), key =&gt; callback, (key, old) =&gt; callback);" />
      <LineAnalysis line="37" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="38" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="39" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public void Remove(MethodInfo? method)" />
      <LineAnalysis line="40" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="41" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            if (method == null) return;" />
      <LineAnalysis line="42" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            var selectedKeys = _store.Keys.Where(k =&gt; k.method == method).ToArray();" />
      <LineAnalysis line="43" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            foreach (var key in selectedKeys)" />
      <LineAnalysis line="44" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                _store.TryRemove(key, out _);" />
      <LineAnalysis line="45" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="46" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public void Remove(Type? type)" />
      <LineAnalysis line="47" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="48" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            if (type == null) return;" />
      <LineAnalysis line="49" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            var selectedKeys = _store.Keys.Where(k =&gt; k.type == type).ToArray();" />
      <LineAnalysis line="50" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            foreach (var key in selectedKeys)" />
      <LineAnalysis line="51" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                _store.TryRemove(key, out _);" />
      <LineAnalysis line="52" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="53" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public void Remove(Type? type, MethodInfo? method)" />
      <LineAnalysis line="54" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="55" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            if (method == null) return;" />
      <LineAnalysis line="56" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            _store.TryRemove((type, method), out _);" />
      <LineAnalysis line="57" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="58" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="59" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public void Clear() =&gt; _store.Clear();" />
      <LineAnalysis line="60" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="61" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public IReadOnlyList&lt;(Type? type, MethodInfo method, Delegate callback)&gt; GetAll() =&gt;" />
      <LineAnalysis line="62" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            _store.Select(i =&gt; (i.Key.type, i.Key.method, i.Value)).ToArray();" />
      <LineAnalysis line="63" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public IReadOnlyList&lt;(MethodInfo method, Delegate callback)&gt; GetByType(Type? type) =&gt;" />
      <LineAnalysis line="64" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            (type == null || type == typeof(void)) ? Array.Empty&lt;(MethodInfo, Delegate)&gt;() :" />
      <LineAnalysis line="65" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            _store.Where(i =&gt; i.Key.type == type).Select(i =&gt; (i.Key.method, i.Value)).ToArray();" />
      <LineAnalysis line="66" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="67" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public Delegate? this[MethodInfo method] =&gt; this[null, method];" />
      <LineAnalysis line="68" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public Delegate? this[Type? type, MethodInfo method] =&gt;" />
      <LineAnalysis line="69" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            _store.TryGetValue((" />
      <LineAnalysis line="70" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                type ?? method?.DeclaringType," />
      <LineAnalysis line="71" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                method ?? throw new NotSupportedException($&quot;Unable to resolve {nameof(MethodInfo)}&quot;" />
      <LineAnalysis line="72" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            )), out var @delegate) ? @delegate : null;" />
      <LineAnalysis line="73" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="74" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="75" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>