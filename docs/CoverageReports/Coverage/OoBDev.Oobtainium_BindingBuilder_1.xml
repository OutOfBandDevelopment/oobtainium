<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="OoBDev.Oobtainium.BindingBuilder`1">
  <Summary>
    <Class>OoBDev.Oobtainium.BindingBuilder`1</Class>
    <Assembly>OoBDev.Oobtainium</Assembly>
    <Files>
      <File>/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium/BindingBuilder.cs</File>
    </Files>
    <Coveredlines>5</Coveredlines>
    <Uncoveredlines>0</Uncoveredlines>
    <Coverablelines>5</Coverablelines>
    <Totallines>84</Totallines>
    <Linecoverage>100</Linecoverage>
    <Coveredbranches>1</Coveredbranches>
    <Totalbranches>2</Totalbranches>
    <Branchcoverage>50</Branchcoverage>
    <Title>src/OoBDev.Oobtainium/OoBDev.Oobtainium.sln - 0.1.0-dev-poc-typebuilding.49</Title>
  </Summary>
  <Metrics>
    <Element name="ctor">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>50.0</Branchcoverage>
    </Element>
    <Element name="get_Store">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Bind">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Build">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
  </Metrics>
  <Files>
    <File name="/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium/BindingBuilder.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System;" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Linq.Expressions;" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Reflection;" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Threading.Tasks;" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace OoBDev.Oobtainium" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public static class BindingBuilderExtensions" />
      <LineAnalysis line="9" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="10" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action, Action callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="11" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action, Action&lt;object[]&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="12" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="13" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&gt;&gt; action) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="14" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Func&lt;object[], R&gt;? callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="15" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Func&lt;object[], R&gt;? callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="16" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Func&lt;R&gt;? callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="17" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Func&lt;R&gt;? callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="18" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action, Func&lt;Task&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="19" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action, Func&lt;object[], Task&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="20" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="21" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public static IBindingBuilder&lt;S&gt; Remove&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action)" />
      <LineAnalysis line="22" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="23" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            builder.Store.Remove(typeof(S), action.AsMethodInfo());" />
      <LineAnalysis line="24" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            return builder;" />
      <LineAnalysis line="25" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="26" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="27" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action, Action callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="28" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action, Func&lt;R&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="29" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action, Func&lt;Task&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="30" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action, Func&lt;Task&lt;R&gt;&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="31" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action, Action&lt;object?[]&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="32" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action, Func&lt;object?[], R&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="33" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action, Func&lt;object?[], Task&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="34" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Action&lt;S&gt;&gt; action, Func&lt;object?[], Task&lt;R&gt;&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="35" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Action callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="36" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Func&lt;R&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="37" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Func&lt;Task&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="38" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Func&lt;Task&lt;R&gt;&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="39" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Action&lt;object?[]&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="40" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Func&lt;object?[], R&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="41" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Func&lt;object?[], Task&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="42" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Func&lt;object?[], Task&lt;R&gt;&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="43" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&gt;&gt; action, Action callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="44" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&gt;&gt; action, Func&lt;R&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="45" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&gt;&gt; action, Func&lt;Task&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="46" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&gt;&gt; action, Func&lt;Task&lt;R&gt;&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="47" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&gt;&gt; action, Action&lt;object?[]&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="48" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&gt;&gt; action, Func&lt;object?[], R&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="49" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&gt;&gt; action, Func&lt;object?[], Task&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="50" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&gt;&gt; action, Func&lt;object?[], Task&lt;R&gt;&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="51" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Action callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="52" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Func&lt;R&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="53" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Func&lt;Task&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="54" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Func&lt;Task&lt;R&gt;&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="55" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Action&lt;object?[]&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="56" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Func&lt;object?[], R&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="57" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Func&lt;object?[], Task&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="58" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Func&lt;object?[], Task&lt;R&gt;&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="59" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R, Q&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Func&lt;Q&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="60" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R, Q&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Func&lt;Task&lt;Q&gt;&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="61" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R, Q&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Func&lt;object?[], Q&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="62" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R, Q&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, R&gt;&gt; action, Func&lt;object?[], Task&lt;Q&gt;&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="63" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R, Q&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Func&lt;Q&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="64" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R, Q&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Func&lt;Task&lt;Q&gt;&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="65" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R, Q&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Func&lt;object?[], Q&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="66" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        //public static IBindingBuilder&lt;S&gt; Bind&lt;S, R, Q&gt;(this IBindingBuilder&lt;S&gt; builder, Expression&lt;Func&lt;S, Task&lt;R&gt;&gt;&gt; action, Func&lt;object?[], Task&lt;Q&gt;&gt; callback) =&gt; builder.Bind(action.AsMethodInfo(), callback);" />
      <LineAnalysis line="67" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="68" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="69" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public class BindingBuilder&lt;S&gt; : IBindingBuilder&lt;S&gt;" />
      <LineAnalysis line="70" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="71" visits="16" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="        public BindingBuilder(ICallBindingStore? store = null) =&gt; Store = store ?? new CallBindingStore();" />
      <LineAnalysis line="72" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="73" visits="22" coverage="Covered" coveredbranches="" totalbranches="" content="        public ICallBindingStore Store { get; }" />
      <LineAnalysis line="74" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="75" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public IBindingBuilder&lt;S&gt; Bind(MethodInfo? method, Delegate? callback)" />
      <LineAnalysis line="76" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="77" visits="16" coverage="Covered" coveredbranches="" totalbranches="" content="            Store.Add(typeof(S), method, callback);" />
      <LineAnalysis line="78" visits="16" coverage="Covered" coveredbranches="" totalbranches="" content="            return this;" />
      <LineAnalysis line="79" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="80" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="81" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="        public IBindingBuilder&lt;U&gt; Build&lt;U&gt;() =&gt; new BindingBuilder&lt;U&gt;(Store);" />
      <LineAnalysis line="82" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="83" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="84" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>