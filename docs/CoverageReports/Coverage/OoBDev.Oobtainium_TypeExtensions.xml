<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="OoBDev.Oobtainium.TypeExtensions">
  <Summary>
    <Class>OoBDev.Oobtainium.TypeExtensions</Class>
    <Assembly>OoBDev.Oobtainium</Assembly>
    <Files>
      <File>/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium/TypeExtensions.cs</File>
    </Files>
    <Coveredlines>16</Coveredlines>
    <Uncoveredlines>2</Uncoveredlines>
    <Coverablelines>18</Coverablelines>
    <Totallines>40</Totallines>
    <Linecoverage>88.8</Linecoverage>
    <Coveredbranches>23</Coveredbranches>
    <Totalbranches>28</Totalbranches>
    <Branchcoverage>82.1</Branchcoverage>
    <Title>src/OoBDev.Oobtainium/OoBDev.Oobtainium.sln - 0.1.0-dev-poc-typebuilding.49</Title>
  </Summary>
  <Metrics>
    <Element name="GetDefaultValue">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>66.66</Branchcoverage>
    </Element>
    <Element name="ConvertOrDefault">
      <Linecoverage>85.71</Linecoverage>
      <Branchcoverage>86.36</Branchcoverage>
    </Element>
  </Metrics>
  <Files>
    <File name="/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium/TypeExtensions.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System;" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.ComponentModel;" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Threading.Tasks;" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace OoBDev.Oobtainium" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public static class TypeExtensions" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="9" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public static object? GetDefaultValue(this Type type) =&gt;" />
      <LineAnalysis line="10" visits="12" coverage="PartiallyCovered" coveredbranches="4" totalbranches="6" content="            type == null ? null :" />
      <LineAnalysis line="11" visits="12" coverage="Covered" coveredbranches="" totalbranches="" content="            type == typeof(void) ? null :" />
      <LineAnalysis line="12" visits="12" coverage="Covered" coveredbranches="" totalbranches="" content="            type.IsValueType ? Activator.CreateInstance(type) :" />
      <LineAnalysis line="13" visits="12" coverage="Covered" coveredbranches="" totalbranches="" content="            null" />
      <LineAnalysis line="14" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            ;" />
      <LineAnalysis line="15" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="16" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public static object? ConvertOrDefault(this Type type, object? input)" />
      <LineAnalysis line="17" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="18" visits="20" coverage="Covered" coveredbranches="" totalbranches="" content="            var task = input as Task;" />
      <LineAnalysis line="19" visits="20" coverage="Covered" coveredbranches="4" totalbranches="4" content="            var captured = task?.GetResultOrDefault() ?? input;" />
      <LineAnalysis line="20" visits="28" coverage="Covered" coveredbranches="2" totalbranches="2" content="            if (task != null) task.GetAwaiter().GetResult();" />
      <LineAnalysis line="21" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="22" visits="24" coverage="Covered" coveredbranches="4" totalbranches="4" content="            if (type == null || type == typeof(void)) return null;" />
      <LineAnalysis line="23" visits="20" coverage="Covered" coveredbranches="2" totalbranches="2" content="            if (type == typeof(Task)) return Task.CompletedTask;" />
      <LineAnalysis line="24" visits="0" coverage="NotCovered" coveredbranches="1" totalbranches="2" content="            if (captured == null) return type.GetDefaultValue();" />
      <LineAnalysis line="25" visits="20" coverage="Covered" coveredbranches="2" totalbranches="2" content="            if (type.IsInstanceOfType(captured)) return captured;" />
      <LineAnalysis line="26" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="27" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="            var converter = TypeDescriptor.GetConverter(captured);" />
      <LineAnalysis line="28" visits="6" coverage="Covered" coveredbranches="2" totalbranches="2" content="            if (converter.CanConvertTo(type)) return converter.ConvertTo(captured, type);" />
      <LineAnalysis line="29" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="30" visits="2" coverage="PartiallyCovered" coveredbranches="2" totalbranches="4" content="            if (typeof(Task).IsAssignableFrom(type) &amp;&amp; type.IsGenericType)" />
      <LineAnalysis line="31" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="32" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                var taskResultType = type.GetGenericArguments()[0];" />
      <LineAnalysis line="33" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                var wrapped = taskResultType.ConvertOrDefault(captured);" />
      <LineAnalysis line="34" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="                return wrapped.AsTask();" />
      <LineAnalysis line="35" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="36" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="37" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            return null;" />
      <LineAnalysis line="38" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="39" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="40" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>