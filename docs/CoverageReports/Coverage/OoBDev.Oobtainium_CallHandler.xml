<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="OoBDev.Oobtainium.CallHandler">
  <Summary>
    <Class>OoBDev.Oobtainium.CallHandler</Class>
    <Assembly>OoBDev.Oobtainium</Assembly>
    <Files>
      <File>/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium/CallHandler.cs</File>
    </Files>
    <Coveredlines>13</Coveredlines>
    <Uncoveredlines>21</Uncoveredlines>
    <Coverablelines>34</Coverablelines>
    <Totallines>67</Totallines>
    <Linecoverage>38.2</Linecoverage>
    <Coveredbranches>10</Coveredbranches>
    <Totalbranches>32</Totalbranches>
    <Branchcoverage>31.2</Branchcoverage>
    <Title>src/OoBDev.Oobtainium/OoBDev.Oobtainium.sln - 0.1.0-dev-poc-typebuilding.49</Title>
  </Summary>
  <Metrics>
    <Element name="get_Store">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="ctor">
      <Linecoverage>100</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Invocation">
      <Linecoverage>76.92</Linecoverage>
      <Branchcoverage>50.0</Branchcoverage>
    </Element>
    <Element name="BuildDelegateArguments">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>0</Branchcoverage>
    </Element>
    <Element name="Invoke">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Invoke">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Invoke">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Invoke">
      <Linecoverage>50.0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Invoke">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Invoke">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Invoke">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
    <Element name="Invoke">
      <Linecoverage>0</Linecoverage>
      <Branchcoverage>100</Branchcoverage>
    </Element>
  </Metrics>
  <Files>
    <File name="/home/runner/work/oobtainium/oobtainium/src/OoBDev.Oobtainium/OoBDev.Oobtainium/CallHandler.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System;" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Linq.Expressions;" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Reflection;" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace OoBDev.Oobtainium" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    public class CallHandler : ICallHandler" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="9" visits="46" coverage="Covered" coveredbranches="" totalbranches="" content="        public ICallBindingStore Store { get; }" />
      <LineAnalysis line="10" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="11" visits="16" coverage="Covered" coveredbranches="2" totalbranches="2" content="        public CallHandler(ICallBindingStore? store = null) =&gt; Store = store ?? new CallBindingStore();" />
      <LineAnalysis line="12" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="13" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private object? Invocation(Type? type, MethodInfo? method, object[]? arguments)" />
      <LineAnalysis line="14" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="15" visits="0" coverage="NotCovered" coveredbranches="1" totalbranches="2" content="            if (method == null) return null;" />
      <LineAnalysis line="16" visits="44" coverage="Covered" coveredbranches="" totalbranches="" content="            var @delegate = Store[type, method];" />
      <LineAnalysis line="17" visits="70" coverage="Covered" coveredbranches="2" totalbranches="2" content="            if (@delegate == null) return null;" />
      <LineAnalysis line="18" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="19" visits="18" coverage="Covered" coveredbranches="" totalbranches="" content="            var parameters = @delegate.Method.GetParameters();" />
      <LineAnalysis line="20" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="21" visits="18" coverage="PartiallyCovered" coveredbranches="3" totalbranches="4" content="            var requestArguments = parameters.Length switch" />
      <LineAnalysis line="22" visits="18" coverage="Covered" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="23" visits="30" coverage="Covered" coveredbranches="" totalbranches="" content="                0 =&gt; Array.Empty&lt;object&gt;()," />
      <LineAnalysis line="24" visits="30" coverage="PartiallyCovered" coveredbranches="2" totalbranches="4" content="                1 when parameters[0].ParameterType == typeof(object[]) =&gt; new object[] { arguments ?? Array.Empty&lt;object&gt;() }," />
      <LineAnalysis line="25" visits="0" coverage="NotCovered" coveredbranches="0" totalbranches="4" content="                _ when parameters.Length == (arguments?.Length ?? 0) =&gt; arguments," />
      <LineAnalysis line="26" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="                _ =&gt; BuildDelegateArguments(parameters, arguments)" />
      <LineAnalysis line="27" visits="18" coverage="Covered" coveredbranches="" totalbranches="" content="            };" />
      <LineAnalysis line="28" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="29" visits="18" coverage="Covered" coveredbranches="" totalbranches="" content="            var result = @delegate.DynamicInvoke(requestArguments);" />
      <LineAnalysis line="30" visits="18" coverage="Covered" coveredbranches="" totalbranches="" content="            return method.ReturnType.ConvertOrDefault(result);" />
      <LineAnalysis line="31" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="32" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="33" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private static object?[] BuildDelegateArguments(ParameterInfo[] parameters, object?[]? arguments)" />
      <LineAnalysis line="34" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="35" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            var args = new object?[parameters.Length];" />
      <LineAnalysis line="36" visits="0" coverage="NotCovered" coveredbranches="0" totalbranches="2" content="            var argLength = arguments?.Length ?? 0;" />
      <LineAnalysis line="37" visits="0" coverage="NotCovered" coveredbranches="0" totalbranches="2" content="            for (var index = 0; index &lt; parameters.Length; index++)" />
      <LineAnalysis line="38" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="39" visits="0" coverage="NotCovered" coveredbranches="0" totalbranches="8" content="                if (index &lt; argLength &amp;&amp; arguments?[index] != null &amp;&amp; parameters[index].ParameterType.IsInstanceOfType(arguments[index]))" />
      <LineAnalysis line="40" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                {" />
      <LineAnalysis line="41" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="                    args[index] = arguments[index];" />
      <LineAnalysis line="42" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                }" />
      <LineAnalysis line="43" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                else" />
      <LineAnalysis line="44" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                {" />
      <LineAnalysis line="45" visits="0" coverage="NotCovered" coveredbranches="0" totalbranches="2" content="                    args[index] = parameters[index].ParameterType?.GetDefaultValue();" />
      <LineAnalysis line="46" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="                }" />
      <LineAnalysis line="47" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="48" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            return args;" />
      <LineAnalysis line="49" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="50" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="51" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public object? Invoke(Type? type, MethodInfo method) =&gt; Invocation(type, method, null);" />
      <LineAnalysis line="52" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public object? Invoke(Type? type, MethodInfo method, object[]? arguments) =&gt; Invocation(type, method, arguments);" />
      <LineAnalysis line="53" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public object? Invoke&lt;T&gt;(MethodInfo method) =&gt; Invocation(null, method, null);" />
      <LineAnalysis line="54" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="55" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public object? Invoke(MethodInfo method) =&gt; Invocation(null, method, null);" />
      <LineAnalysis line="56" visits="44" coverage="Covered" coveredbranches="" totalbranches="" content="        public object? Invoke(MethodInfo method, object[]? arguments) =&gt; Invocation(null, method, arguments);" />
      <LineAnalysis line="57" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public object? Invoke&lt;T&gt;(MethodInfo method, object[]? arguments) =&gt; Invocation(typeof(T), method, arguments);" />
      <LineAnalysis line="58" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="59" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public object? Invoke(Expression action) =&gt; Invocation(null, action.AsMethodInfo(), null);" />
      <LineAnalysis line="60" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public object? Invoke(Type? type, Expression action) =&gt; Invocation(type, action.AsMethodInfo(), null);" />
      <LineAnalysis line="61" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public object? Invoke&lt;T&gt;(Expression action) =&gt; Invocation(typeof(T), action.AsMethodInfo(), null);" />
      <LineAnalysis line="62" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="63" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public object? Invoke(Type? type, Expression action, object[]? arguments) =&gt; Invocation(type, action.AsMethodInfo(), arguments);" />
      <LineAnalysis line="64" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public object? Invoke(Expression action, object[]? arguments) =&gt; Invocation(null, action.AsMethodInfo(), arguments);" />
      <LineAnalysis line="65" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public object? Invoke&lt;T&gt;(Expression action, object[]? arguments) =&gt; Invocation(typeof(T), action.AsMethodInfo(), arguments);" />
      <LineAnalysis line="66" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="67" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>